Consider the schema for MovieDatabase: ACTOR (Act_id, Act_Name, Act_Gender) DIRECTOR (Dir_id, Dir_Name, Dir_Phone) MOVIES (Mov_id, Mov_Title, Mov_Year, Mov_Lang, Dir_id) MOVIE_CAST (Act_id, Mov_id, Role) RATING (Mov_id, Rev_Stars) 
Write SQL queries to 
1. List the titles of all movies directed by ‘Hitchcock’.
2. Find the movie names where one or more actors acted in two or more movies. 
3. List all actors who acted in a movie before 2000 and also in a movieafter 2015. 
4. Find the title of movies and number of stars for each movie that has at least one rating and find the highest number of stars that movie received. Sort the result by movie title. 
5. Update rating of all movies directed by ‘Steven Spielberg’ to5.
--Write a PL/SQL program for Fibonacci series

CREATE TABLE ACTOR (
  Act_id INT PRIMARY KEY,
  Act_Name VARCHAR(50),
  Act_Gender CHAR(1)
);

CREATE TABLE DIRECTOR (
  Dir_id INT PRIMARY KEY,
  Dir_Name VARCHAR(50),
  Dir_Phone VARCHAR(15)
);

CREATE TABLE MOVIES (
  Mov_id INT PRIMARY KEY,
  Mov_Title VARCHAR(100),
  Mov_Year INT,
  Mov_Lang VARCHAR(30),
  Dir_id INT,
  FOREIGN KEY (Dir_id) REFERENCES DIRECTOR(Dir_id)
);

CREATE TABLE MOVIE_CAST (
  Act_id INT,
  Mov_id INT,
  Role VARCHAR(50),
  PRIMARY KEY (Act_id, Mov_id),
  FOREIGN KEY (Act_id) REFERENCES ACTOR(Act_id),
  FOREIGN KEY (Mov_id) REFERENCES MOVIES(Mov_id)
);

CREATE TABLE RATING (
  Mov_id INT,
  Rev_Stars INT ,
  FOREIGN KEY (Mov_id) REFERENCES MOVIES(Mov_id)
);

INSERT INTO ACTOR VALUES
(1, 'Leonardo DiCaprio', 'M'),
(2, 'Kate Winslet', 'F'),
(3, 'Tom Hanks', 'M'),
(4, 'Scarlett Johansson', 'F'),
(5, 'Morgan Freeman', 'M');

INSERT INTO DIRECTOR VALUES
(1, 'Hitchcock', '9998887777'),
(2, 'Steven Spielberg', '8887776666'),
(3, 'Christopher Nolan', '7776665555');

INSERT INTO MOVIES VALUES
(1, 'Psycho', 1960, 'English', 1),
(2, 'Vertigo', 1958, 'English', 1),
(3, 'Inception', 2010, 'English', 3),
(4, 'Interstellar', 2014, 'English', 3),
(5, 'Titanic', 1997, 'English', 2),
(6, 'Bridge of Spies', 2015, 'English', 2),
(7, 'The Post', 2017, 'English', 2);

INSERT INTO MOVIE_CAST VALUES
(1, 3, 'Cobb'),
(1, 4, 'Cooper'),
(2, 5, 'Rose'),
(3, 6, 'James Donovan'),
(3, 7, 'Ben Bradlee'),
(4, 7, 'Kay Graham'),
(5, 1, 'Bates'),
(5, 2, 'Ferguson');

INSERT INTO RATING VALUES
(1, 4),
(2, 5),
(3, 5),
(4, 4),
(5, 5),
(6, 3),
(7, 4);

SELECT M.Mov_Title
FROM MOVIES M
JOIN DIRECTOR D ON M.Dir_id = D.Dir_id
WHERE D.Dir_Name = 'Hitchcock';

SELECT M.Mov_Title
FROM MOVIES M
JOIN MOVIE_CAST MC ON M.Mov_id = MC.Mov_id
WHERE MC.Act_id IN (
SELECT Act_id
FROM MOVIE_CAST
GROUP BY Act_id
HAVING COUNT(Mov_id) >= 2
);

SELECT DISTINCT A.Act_Name
FROM ACTOR A
JOIN MOVIE_CAST MC1 ON A.Act_id = MC1.Act_id
JOIN MOVIES M1 ON MC1.Mov_id = M1.Mov_id
JOIN MOVIE_CAST MC2 ON A.Act_id = MC2.Act_id
JOIN MOVIES M2 ON MC2.Mov_id = M2.Mov_id
WHERE M1.Mov_Year < 2000
  AND M2.Mov_Year > 2015;

SELECT M.Mov_Title, MAX(R.Rev_Stars) AS Highest_Stars
FROM MOVIES M
JOIN RATING R ON M.Mov_id = R.Mov_id
GROUP BY M.Mov_Title
ORDER BY M.Mov_Title;

UPDATE RATING
SET Rev_Stars = 5
WHERE Mov_id IN (
  SELECT Mov_id
  FROM MOVIES
  WHERE Dir_id = (
    SELECT Dir_id FROM DIRECTOR WHERE Dir_Name = 'Steven Spielberg'
  )
);

—------------------------------------------------------------------------------------------
SET serveroutput on;
DECLARE 
  n number:=6;
  num1 number:=0;
  num2 number:=1;
  nextnum number:=0;
  i number:=0;
BEGIN
  WHILE i<n LOOP
    dbms_output.put_line(num1);
    nextnum:=num1+num2;
    num1:=num2;
    num2:=nextnum;
    i:=i+1;
  END LOOP;
END;
/
